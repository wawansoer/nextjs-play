// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider          = "postgresql"
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL") // Only needed when using a cloud provider that doesn't support the creation of new databases, like Heroku. Learn more: https://pris.ly/d/migrate-shadow
}

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "linux-musl"]
}

model Account {
  id                String  @id @default(uuid()) @db.Uuid
  userId            String  @db.Uuid
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(uuid()) @db.Uuid
  sessionToken String   @unique
  userId       String   @db.Uuid
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id                    String    @id @default(uuid()) @db.Uuid
  name                  String?
  email                 String?   @unique
  emailVerified         DateTime?
  image                 String?
  password              String?
  passwordResetToken    String?   @unique
  passwordResetTokenExp DateTime?
  accounts              Account[]
  sessions              Session[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}


model BlogTags {
  Id        String   @id @default(uuid()) @map("Id") @db.Uuid
  BlogId    String   @map("BlogId") @db.Uuid
  TagId     String   @map("TagId") @db.Uuid
  CreatedAt DateTime @default(now()) @map("CreatedAt") @db.Timestamp(6)
  UpdatedAt DateTime @updatedAt @map("UpdatedAt") @db.Timestamp(6)

  Blog Blogs @relation(fields: [BlogId], references: [Id], onDelete: Cascade)
  Tag  Tags  @relation(fields: [TagId], references: [Id], onDelete: Cascade)
}

model Tags {
  Id        String     @id @default(uuid()) @map("Id") @db.Uuid
  Name      String     @map("Name") @db.VarChar(255)
  Slug      String     @unique @map("Slug") @db.VarChar(255)
  CreatedAt DateTime   @default(now()) @map("CreatedAt") @db.Timestamp(6)
  UpdatedAt DateTime   @updatedAt @map("UpdatedAt") @db.Timestamp(6)
  Blogs     BlogTags[]
}

model BlogCategories {
  Id         String   @id @default(uuid()) @map("Id") @db.Uuid
  BlogId     String   @map("BlogId") @db.Uuid
  CategoryId String   @map("CategoryId") @db.Uuid
  CreatedAt  DateTime @default(now()) @map("CreatedAt") @db.Timestamp(6)
  UpdatedAt  DateTime @updatedAt @map("UpdatedAt") @db.Timestamp(6)

  Blog     Blogs      @relation(fields: [BlogId], references: [Id], onDelete: Cascade)
  Category Categories @relation(fields: [CategoryId], references: [Id], onDelete: Cascade)
}

model Blogs {
  Id              String     @id @default(uuid()) @map("Id") @db.Uuid
  AuthorId        String     @map("AuthorId") @db.Uuid
  Title           String     @map("Title") @db.VarChar(255)
  Slug            String     @unique @map("Slug") @db.VarChar(255)
  MetaDescription String     @map("MetaDescription") @db.VarChar(255)
  Content         String     @map("Content") @db.Text
  FeaturedImage   String?    @map("FeaturedImage") @db.VarChar(255)
  CreatedAt       DateTime   @default(now()) @map("CreatedAt") @db.Timestamp(6)
  UpdatedAt       DateTime   @updatedAt @map("UpdatedAt") @db.Timestamp(6)
  PublishedAt     DateTime?  @map("PublishedAt") @db.Timestamp(6)
  Status          BlogStatus @default(draft) @map("Status")

  Author     Authors          @relation(fields: [AuthorId], references: [Id], onDelete: Cascade)
  Categories BlogCategories[]
  Tags       BlogTags[]
  Media      Media[]
}

model Media {
  Id        String    @id @default(uuid()) @map("Id") @db.Uuid
  BlogId    String    @map("BlogId") @db.Uuid
  Type      MediaType @map("Type")
  Url       String    @map("Url") @db.VarChar(255)
  CreatedAt DateTime  @default(now()) @map("CreatedAt") @db.Timestamp(6)
  UpdatedAt DateTime  @updatedAt @map("UpdatedAt") @db.Timestamp(6)

  Blog Blogs @relation(fields: [BlogId], references: [Id], onDelete: Cascade)
}

model Authors {
  Id             String   @id @default(uuid()) @map("Id") @db.Uuid
  Name           String   @map("Name") @db.VarChar(255)
  Bio            String   @map("Bio") @db.Text
  ProfilePicture String   @map("ProfilePicture") @db.VarChar(255)
  CreatedAt      DateTime @default(now()) @map("CreatedAt") @db.Timestamp(6)
  UpdatedAt      DateTime @updatedAt @map("UpdatedAt") @db.Timestamp(6)
  Blogs          Blogs[]
}

model Categories {
  Id        String           @id @default(uuid()) @map("Id") @db.Uuid
  Name      String           @map("Name") @db.VarChar(255)
  Slug      String           @unique @map("Slug") @db.VarChar(255)
  CreatedAt DateTime         @default(now()) @map("CreatedAt") @db.Timestamp(6)
  UpdatedAt DateTime         @updatedAt @map("UpdatedAt") @db.Timestamp(6)
  Blogs     BlogCategories[]
}

enum BlogStatus {
  draft
  published
  archived
}

enum MediaType {
  image
  video
  audio
}
